<svg id="diagram" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 9773.513671875px;" viewBox="0 0 9773.513671875 45.996734619140625"><style>


#diagram .label {
  font-family: 'trebuchet ms', verdana, arial;
  color: #333; }

#diagram .node rect,
#diagram .node circle,
#diagram .node ellipse,
#diagram .node polygon {
  fill: #ECECFF;
  stroke: #9370DB;
  stroke-width: 1px; }

#diagram .node.clickable {
  cursor: pointer; }

#diagram .arrowheadPath {
  fill: #333333; }

#diagram .edgePath .path {
  stroke: #333333;
  stroke-width: 1.5px; }

#diagram .edgeLabel {
  background-color: #e8e8e8; }

#diagram .cluster rect {
  fill: #ffffde !important;
  stroke: #aaaa33 !important;
  stroke-width: 1px !important; }

#diagram .cluster text {
  fill: #333; }

#diagram div.mermaidTooltip {
  position: absolute;
  text-align: center;
  max-width: 200px;
  padding: 2px;
  font-family: 'trebuchet ms', verdana, arial;
  font-size: 12px;
  background: #ffffde;
  border: 1px solid #aaaa33;
  border-radius: 2px;
  pointer-events: none;
  z-index: 100; }

#diagram .actor {
  stroke: #CCCCFF;
  fill: #ECECFF; }

#diagram text.actor {
  fill: black;
  stroke: none; }

#diagram .actor-line {
  stroke: grey; }

#diagram .messageLine0 {
  stroke-width: 1.5;
  stroke-dasharray: '2 2';
  stroke: #333; }

#diagram .messageLine1 {
  stroke-width: 1.5;
  stroke-dasharray: '2 2';
  stroke: #333; }

#diagram #arrowhead {
  fill: #333; }

#diagram #crosshead path {
  fill: #333 !important;
  stroke: #333 !important; }

#diagram .messageText {
  fill: #333;
  stroke: none; }

#diagram .labelBox {
  stroke: #CCCCFF;
  fill: #ECECFF; }

#diagram .labelText {
  fill: black;
  stroke: none; }

#diagram .loopText {
  fill: black;
  stroke: none; }

#diagram .loopLine {
  stroke-width: 2;
  stroke-dasharray: '2 2';
  stroke: #CCCCFF; }

#diagram .note {
  stroke: #aaaa33;
  fill: #fff5ad; }

#diagram .noteText {
  fill: black;
  stroke: none;
  font-family: 'trebuchet ms', verdana, arial;
  font-size: 14px; }

#diagram .activation0 {
  fill: #f4f4f4;
  stroke: #666; }

#diagram .activation1 {
  fill: #f4f4f4;
  stroke: #666; }

#diagram .activation2 {
  fill: #f4f4f4;
  stroke: #666; }


#diagram .section {
  stroke: none;
  opacity: 0.2; }

#diagram .section0 {
  fill: rgba(102, 102, 255, 0.49); }

#diagram .section2 {
  fill: #fff400; }

#diagram .section1,
#diagram .section3 {
  fill: white;
  opacity: 0.2; }

#diagram .sectionTitle0 {
  fill: #333; }

#diagram .sectionTitle1 {
  fill: #333; }

#diagram .sectionTitle2 {
  fill: #333; }

#diagram .sectionTitle3 {
  fill: #333; }

#diagram .sectionTitle {
  text-anchor: start;
  font-size: 11px;
  text-height: 14px; }


#diagram .grid .tick {
  stroke: lightgrey;
  opacity: 0.3;
  shape-rendering: crispEdges; }

#diagram .grid path {
  stroke-width: 0; }


#diagram .today {
  fill: none;
  stroke: red;
  stroke-width: 2px; }



#diagram .task {
  stroke-width: 2; }

#diagram .taskText {
  text-anchor: middle;
  font-size: 11px; }

#diagram .taskTextOutsideRight {
  fill: black;
  text-anchor: start;
  font-size: 11px; }

#diagram .taskTextOutsideLeft {
  fill: black;
  text-anchor: end;
  font-size: 11px; }


#diagram .taskText0,
#diagram .taskText1,
#diagram .taskText2,
#diagram .taskText3 {
  fill: white; }

#diagram .task0,
#diagram .task1,
#diagram .task2,
#diagram .task3 {
  fill: #8a90dd;
  stroke: #534fbc; }

#diagram .taskTextOutside0,
#diagram .taskTextOutside2 {
  fill: black; }

#diagram .taskTextOutside1,
#diagram .taskTextOutside3 {
  fill: black; }


#diagram .active0,
#diagram .active1,
#diagram .active2,
#diagram .active3 {
  fill: #bfc7ff;
  stroke: #534fbc; }

#diagram .activeText0,
#diagram .activeText1,
#diagram .activeText2,
#diagram .activeText3 {
  fill: black !important; }


#diagram .done0,
#diagram .done1,
#diagram .done2,
#diagram .done3 {
  stroke: grey;
  fill: lightgrey;
  stroke-width: 2; }

#diagram .doneText0,
#diagram .doneText1,
#diagram .doneText2,
#diagram .doneText3 {
  fill: black !important; }


#diagram .crit0,
#diagram .crit1,
#diagram .crit2,
#diagram .crit3 {
  stroke: #ff8888;
  fill: red;
  stroke-width: 2; }

#diagram .activeCrit0,
#diagram .activeCrit1,
#diagram .activeCrit2,
#diagram .activeCrit3 {
  stroke: #ff8888;
  fill: #bfc7ff;
  stroke-width: 2; }

#diagram .doneCrit0,
#diagram .doneCrit1,
#diagram .doneCrit2,
#diagram .doneCrit3 {
  stroke: #ff8888;
  fill: lightgrey;
  stroke-width: 2;
  cursor: pointer;
  shape-rendering: crispEdges; }

#diagram .doneCritText0,
#diagram .doneCritText1,
#diagram .doneCritText2,
#diagram .doneCritText3 {
  fill: black !important; }

#diagram .activeCritText0,
#diagram .activeCritText1,
#diagram .activeCritText2,
#diagram .activeCritText3 {
  fill: black !important; }

#diagram .titleText {
  text-anchor: middle;
  font-size: 18px;
  fill: black; }

#diagram g.classGroup text {
  fill: #9370DB;
  stroke: none;
  font-family: 'trebuchet ms', verdana, arial;
  font-size: 10px; }

#diagram g.classGroup rect {
  fill: #ECECFF;
  stroke: #9370DB; }

#diagram g.classGroup line {
  stroke: #9370DB;
  stroke-width: 1; }

#diagram .classLabel .box {
  stroke: none;
  stroke-width: 0;
  fill: #ECECFF;
  opacity: 0.5; }

#diagram .classLabel .label {
  fill: #9370DB;
  font-size: 10px; }

#diagram .relation {
  stroke: #9370DB;
  stroke-width: 1;
  fill: none; }

#diagram #compositionStart {
  fill: #9370DB;
  stroke: #9370DB;
  stroke-width: 1; }

#diagram #compositionEnd {
  fill: #9370DB;
  stroke: #9370DB;
  stroke-width: 1; }

#diagram #aggregationStart {
  fill: #ECECFF;
  stroke: #9370DB;
  stroke-width: 1; }

#diagram #aggregationEnd {
  fill: #ECECFF;
  stroke: #9370DB;
  stroke-width: 1; }

#diagram #dependencyStart {
  fill: #9370DB;
  stroke: #9370DB;
  stroke-width: 1; }

#diagram #dependencyEnd {
  fill: #9370DB;
  stroke: #9370DB;
  stroke-width: 1; }

#diagram #extensionStart {
  fill: #9370DB;
  stroke: #9370DB;
  stroke-width: 1; }

#diagram #extensionEnd {
  fill: #9370DB;
  stroke: #9370DB;
  stroke-width: 1; }

#diagram .commit-id,
#diagram .commit-msg,
#diagram .branch-label {
  fill: lightgrey;
  color: lightgrey; }
</style><style>#diagram {
    color: rgb(0, 0, 0);
    font: 9px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
  }</style><g transform="translate(-12, -12)"><g class="output"><g class="clusters"></g><g class="edgePaths"></g><g class="edgeLabels"></g><g class="nodes"><g class="node" id="froml1c7tol112c2" transform="translate(4898.7568359375,34.99836730957031)" style="opacity: 1;"><rect rx="5" ry="5" x="-4878.7568359375" y="-14.998367309570312" width="9757.513671875" height="29.996734619140625"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-4868.7568359375,-4.9983673095703125)"><foreignObject width="9737.513671875" height="9.996734619140625"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">const AuthStore = defineStore('auth', () =&gt; {
  const accessToken = ref<string>(localStorage.getItem('accessToken') || '');
  const refreshToken = ref<string>(localStorage.getItem('refreshToken') || '');
  const router = useRouter();
  const phoneNumber = ref<string>(localStorage.getItem('phoneNumber') || '');

  function setTokens(newAccessToken: string, newRefreshToken: string) {
    accessToken.value = newAccessToken;
    refreshToken.value = newRefreshToken;
    localStorage.setItem('accessToken', newAccessToken);
    localStorage.setItem('refreshToken', newRefreshToken);
  }

  function setPhone(phone_number: string) {
    phoneNumber.value = phone_number;
  }

  function clearPhone() {
    phoneNumber.value = '';
    localStorage.removeItem('phoneNumber');
  }

  function clearTokens() {
    accessToken.value = '';
    refreshToken.value = '';
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
  }

  function isTokenValid(token: string): boolean {
    if (!token) return false;

    try {
      const decoded = jwtDecode<jwtpayload>(token);
      const currentTime = Math.floor(Date.now() / 1000); // Текущее время в секундах

      console.log(typeof decoded.exp);
      console.log(typeof currentTime);
      return decoded.exp! &gt; currentTime;
    } catch (error) {
      console.error('Ошибка декодирования токена:', error);
      return false;
    }
  }

  function isAccessActual(): boolean {
    return isTokenValid(accessToken.value);
  }

  function isRefreshActual(): boolean {
    return isTokenValid(refreshToken.value);
  }

  async function refreshAccessToken(): Promise<boolean> {
    if (!isRefreshActual()) {
      clearTokens();
      return false;
    }

    try {
      const response = await fetch(RefreshUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          refresh: refreshToken.value
        })
      });

      if (response.ok) {
        const {
          access
        } = await response.json();
        setTokens(access, refreshToken.value); // Обновляем только access token

        return true;
      } else {
        throw new Error('Не удалось обновить токен');
      }
    } catch (error) {
      console.error('Ошибка при обновлении токена:', error);
      clearTokens();
      await router.push('/login');
      return false;
    }
  }

  async function checkAuthBeforeRequest(): Promise<boolean> {
    if (isAccessActual()) {
      return true;
    }

    return await refreshAccessToken();
  } // Выход из системы


  async function logout() {
    clearTokens();
    await router.push('/login');
  }

  return {
    accessToken,
    refreshToken,
    LoginUrl,
    VerifyOtpUrl,
    setTokens,
    setPhone,
    phoneNumber,
    clearPhone,
    clearTokens,
    isAccessActual,
    isRefreshActual,
    refreshAccessToken,
    checkAuthBeforeRequest,
    logout
  };
});</boolean></boolean></jwtpayload></string></string></string></div></foreignObject></g></g></g></g></g></g></svg>